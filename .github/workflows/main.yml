name: Weekly Traffic Report

on:
  schedule:
    - cron: "0 0 * * 1"  # 每周一 UTC 00:00 (北京时间周一 08:00)
  workflow_dispatch:

jobs:
  collect-traffic:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
    
    steps:
    # 步骤 1: 检出代码（包含所有分支和历史）
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录
    
    # 步骤 2: 确保目录结构存在
    - name: Create directory structure
      run: |
        echo "创建必要的目录结构..."
        mkdir -p .github/traffic
        touch .github/traffic/traffic_data.csv
        
        echo "当前目录结构:"
        ls -R .github
    
    # 步骤 3: 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    
    # 步骤 4: 安装依赖
    - name: Install dependencies
      run: pip install requests
    
    # 步骤 5: 添加调试信息
    - name: Debug before running script
      run: |
        echo "工作目录: $(pwd)"
        echo ".github 目录内容:"
        ls -la .github
        echo ".github/traffic 目录内容:"
        ls -la .github/traffic
    
    # 步骤 6: 运行流量收集脚本（使用完整路径）
    - name: Run traffic collector
      run: python .github/traffic/traffic_collector.py
    
    # 步骤 7: 提交并推送更改
    - name: Commit and push changes
      run: |
        git config user.name "github-actions"
        git config user.email "actions@users.noreply.github.com"
        git add .github/traffic/traffic_data.csv
        
        # 仅当有实际更改时才提交
        if git diff-index --quiet HEAD --; then
          echo "没有需要提交的更改"
        else
          git commit -m "自动更新流量数据"
          git push "https://${{ github.actor }}:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git"
        fi
